vars <- c("x",
"Hospital",
# HlthIn.names,
# "RaceW",
# "Age",
"Gender",
"Weekend",
"EMSNote",
"EducEMS")
gcasr <- gcasr[, vars]
gcasr[gcasr == -99] <- NA
gcasr$EMSNote[gcasr$EMSNote == 9] <- NA
gcasr$EducEMS[gcasr$EducEMS == -1] <- 0
# remove obs with missing EducEMS
gcasr <- subset(gcasr, subset = ( !is.na(EducEMS) ))
# remove obs with missing Gender
gcasr <- subset(gcasr, subset = ( !is.na(Gender) ))
# for  Heckman's model, remove hospitals with less than 50 samples
large.hosp <- as.integer(attr(which(table(gcasr$Hospital) >= 50), "names"))
gcasr <- subset(gcasr, subset = (Hospital %in% large.hosp))
# # center Age
# gcasr$Age <- gcasr$Age - mean(gcasr$Age)
# dichotomize gender
gcasr$Gender <- gcasr$Gender - 1
dd <- gcasr
##### analysis #####
n.hosp <- length(unique(dd$Hospital))
dd <- dd[order(dd$Hospital, decreasing = FALSE), ]
n.miss <- aggregate(dd$EMSNote, by = list(dd$Hospital), FUN = function(x) {sum(is.na(x))})
n.miss[, 3] <- table(dd$Hospital)
dd <- subset(dd, subset = Hospital %in% n.miss[which(n.miss[, 2]/n.miss[,3] > 0.05), 1])
d <- new.env()
d$model = "gaussian"
d$N = nrow(dd)
d$p.y = ncol(dd) - 1 - 1 # outcome, Hospital ID, EducEMS + intercept
d$p.s <- ncol(dd) - 1 - 1 + 1 # Hospital ID, EMSNote, + intercept
d$p.o <- d$p.s - 1 #  - EducEMS
d$y = log(dd$x)
d$K <- dd$Hospital
d$muy <- NULL
d$Xp = as.matrix(dd[, -(1:2)])
d$Xp_obs = as.matrix(dd[, -(1:2)])
# d$prob.missing = prob.missing
d$theta = NULL
d$beta = NULL
d$alpha = NULL
d$rho <- NULL
d$delta <- NULL
save(d, file = "gcasr_clean")
d$p.y <- ncol(dd) - 1 - 1
d$alpha = rep(0,d$p.y - 1)
d$Xp = as.matrix(dd[, -c(1, 2, 12)])
d$Xp_obs = as.matrix(dd[, -c(1, 2, 12)])
save(d, file = "gcasr_clean_noEduc")
table(dd$Hospital)
n.miss
n.miss[, 2]/n.miss[, 3]
rm(list = ls())
setwd("~/Library/CloudStorage/Box-Box/ITCR/code/MNAR")
library(parallel)
# source("report.R")
n.cores <- detectCores()
load("RealData/gcasr_clean")
n <- c(table(d$K))
N <- sum(n)
ctr <- which.max(table(d$K))
midx <- 1 + d$p.y
Xidx_s <- setdiff(1:(2 + d$p.y), midx)
Xidx_o <- setdiff(1:(2 + d$p.y - 1), midx)
method <- "logreg"
# No. of imputation
M <- 100
##################
# Complete Cases #
##################
source("Sim/PP.R")
realCC <- lm(d$y ~ d$Xp[, 1:(d$p.y - 1)])
realCC$coefficients
########
# HIMI #
########
# M <- 50
source("IMI/SimIMI.R")
realHIMI <- IMI(d,M,midx,Xidx_s,Xidx_o,method,n)
realHIMI$theta
########
# HDMI #
########
# K = 3
# M <- 50
source("AVGMMI/SimAVGMMI.R")
realHDMI <- AVGMMI(d,M,midx,Xidx_s,Xidx_o,method,n)
realHDMI$theta
######################
# Aggregated Heckman #
######################
# M <- 50
source("IMI/SimIMI.R")
realHAGG <- IMI(d,M,midx,Xidx_s,Xidx_o,method,N)
realHAGG$theta
setwd("~/Library/CloudStorage/Box-Box/ITCR/code/MNAR/MIDist-master")
#######
# IMI #
#######
load("../RealData/gcasr_clean_noEduc")
midx <- 1 + d$p.y
# M <- 50
source("IMI/SimIMI.R")
realIMI <- IMI(d,M,midx,method,n)
realIMI$theta
##############
# Aggregated #
##############
# M <- 50
source("IMI/SimIMI.R")
realIMI <- IMI(d,M,midx,method,N)
realIMI$theta
########
# AVGM #
########
# M <- 50
source("AVGMMI/SimAVGMMI.R")
realAVGMMI <- AVGMMI(d,M,midx,method,n)
realAVGMMI$theta
#######
# CSL #
#######
# M <- 50
source("CSLMI/SimCSLMI.R")
realCSLMI <- CSLMI(d,M,midx,method,n)
realCSLMI$theta
View(CSLMI)
View(CSLLS)
View(CSLLogit)
table(d$K)
View(AVGMLogit)
View(PPLogit)
View(Logit)
View(LS)
View(Logit)
View(HMML_LS)
View(HMML_Logit)
View(CSLMI)
View(CSLLS)
rm(list = ls())
setwd("~/Library/CloudStorage/Box-Box/ITCR/code/MNAR")
library(parallel)
# source("report.R")
n.cores <- detectCores()
load("RealData/gcasr_clean")
n <- c(table(d$K))
N <- sum(n)
ctr <- which.max(table(d$K))
midx <- 1 + d$p.y
Xidx_s <- setdiff(1:(2 + d$p.y), midx)
Xidx_o <- setdiff(1:(2 + d$p.y - 1), midx)
method <- "logreg"
# No. of imputation
M <- 100
##################
# Complete Cases #
##################
source("Sim/PP.R")
realCC <- lm(d$y ~ d$Xp[, 1:(d$p.y - 1)])
realCC$coefficients
########
# HIMI #
########
# M <- 50
source("IMI/SimIMI.R")
realHIMI <- IMI(d,M,midx,Xidx_s,Xidx_o,method,n)
realHIMI$theta
########
# HDMI #
########
# K = 3
# M <- 50
source("AVGMMI/SimAVGMMI.R")
realHDMI <- AVGMMI(d,M,midx,Xidx_s,Xidx_o,method,n)
realHDMI$theta
######################
# Aggregated Heckman #
######################
# M <- 50
source("IMI/SimIMI.R")
realHAGG <- IMI(d,M,midx,Xidx_s,Xidx_o,method,N)
realHAGG$theta
setwd("~/Library/CloudStorage/Box-Box/ITCR/code/MNAR/MIDist-master")
#######
# IMI #
#######
load("../RealData/gcasr_clean_noEduc")
midx <- 1 + d$p.y
# M <- 50
source("IMI/SimIMI.R")
realIMI <- IMI(d,M,midx,method,n)
realIMI$theta
##############
# Aggregated #
##############
# M <- 50
source("IMI/SimIMI.R")
realIMI <- IMI(d,M,midx,method,N)
realIMI$theta
########
# AVGM #
########
# M <- 50
source("AVGMMI/SimAVGMMI.R")
realAVGMMI <- AVGMMI(d,M,midx,method,n)
realAVGMMI$theta
#######
# CSL #
#######
# M <- 50
source("CSLMI/SimCSLMI.R")
realCSLMI <- CSLMI(d,M,midx,method,n)
realCSLMI$theta
getwd()
save.image("~/Library/CloudStorage/Box-Box/ITCR/code/MNAR/RealData/gcasr.Rdata")
setwd("~/Library/CloudStorage/Box-Box/ITCR/code/MNAR/RealData")
##### data cleaning #####
gcasr <- read.csv("~/Library/CloudStorage/Box-Box/ITCR/code/Simulation/DataAnal/final_add.csv")
# select only those who arrive by EMS
gcasr <- subset(gcasr, subset = (ArrMode == 1))
# select "x" which is time to CT as outcome
gcasr <- subset(gcasr, subset = (x > 0 & x < 1200))
# # select patients with known HlthIn
# HlthIn.names <- names(gcasr)[grepl("HlthIn", names(gcasr))]
# gcasr <- gcasr
# for (i in HlthIn.names) {
#   gcasr <- gcasr[gcasr[, i] != -99, ]
# }
# ### 30 patients with unknown health insurance types removed
# pick variables
## outcome: time-to-CT (x in dataset)
## variables: Gender, Weekend # HlthIn, RaceW, Age
## Instrument: EducEMS
vars <- c("x",
"Hospital",
# HlthIn.names,
# "RaceW",
# "Age",
"Gender",
"Weekend",
"EMSNote",
"EducEMS")
gcasr <- gcasr[, vars]
gcasr[gcasr == -99] <- NA
gcasr$EMSNote[gcasr$EMSNote == 9] <- NA
gcasr$EducEMS[gcasr$EducEMS == -1] <- 0
# remove obs with missing EducEMS
gcasr <- subset(gcasr, subset = ( !is.na(EducEMS) ))
# remove obs with missing Gender
gcasr <- subset(gcasr, subset = ( !is.na(Gender) ))
# for  Heckman's model, remove hospitals with less than 50 samples
large.hosp <- as.integer(attr(which(table(gcasr$Hospital) >= 50), "names"))
gcasr <- subset(gcasr, subset = (Hospital %in% large.hosp))
# # center Age
# gcasr$Age <- gcasr$Age - mean(gcasr$Age)
# dichotomize gender
gcasr$Gender <- gcasr$Gender - 1
dd <- gcasr
##### analysis #####
n.hosp <- length(unique(dd$Hospital))
dd <- dd[order(dd$Hospital, decreasing = FALSE), ]
n.miss <- aggregate(dd$EMSNote, by = list(dd$Hospital), FUN = function(x) {sum(is.na(x))})
n.miss[, 3] <- table(dd$Hospital)
dd <- subset(dd, subset = Hospital %in% n.miss[which(n.miss[, 2]/n.miss[,3] > 0.05), 1])
d <- new.env()
d$model = "gaussian"
d$N = nrow(dd)
d$p.y = ncol(dd) - 1 - 1 # outcome, Hospital ID, EducEMS + intercept
d$p.s <- ncol(dd) - 1 - 1 + 1 # Hospital ID, EMSNote, + intercept
d$p.o <- d$p.s - 1 #  - EducEMS
d$y = log(dd$x)
d$K <- dd$Hospital
d$muy <- NULL
d$Xp = as.matrix(dd[, -(1:2)])
d$Xp_obs = as.matrix(dd[, -(1:2)])
# d$prob.missing = prob.missing
d$theta = NULL
d$beta = NULL
d$alpha = NULL
d$rho <- NULL
d$delta <- NULL
save(d, file = "gcasr_clean")
d$p.y <- ncol(dd) - 1 - 1
d$alpha = rep(0,d$p.y - 1)
d$Xp = as.matrix(dd[, -c(1, 2, 12)])
d$Xp_obs = as.matrix(dd[, -c(1, 2, 12)])
save(d, file = "gcasr_clean_noEduc")
rm(list = ls())
setwd("~/Library/CloudStorage/Box-Box/ITCR/code/MNAR")
library(parallel)
# source("report.R")
n.cores <- detectCores()
load("RealData/gcasr_clean")
n <- c(table(d$K))
N <- sum(n)
ctr <- which.max(table(d$K))
midx <- 1 + d$p.y
Xidx_s <- setdiff(1:(2 + d$p.y), midx)
Xidx_o <- setdiff(1:(2 + d$p.y - 1), midx)
method <- "logreg"
# No. of imputation
M <- 100
##################
# Complete Cases #
##################
source("Sim/PP.R")
realCC <- lm(d$y ~ d$Xp[, 1:(d$p.y - 1)])
realCC$coefficients
########
# HIMI #
########
# M <- 50
source("IMI/SimIMI.R")
realHIMI <- IMI(d,M,midx,Xidx_s,Xidx_o,method,n)
realHIMI$theta
########
# HDMI #
########
# K = 3
# M <- 50
source("AVGMMI/SimAVGMMI.R")
realHDMI <- AVGMMI(d,M,midx,Xidx_s,Xidx_o,method,n)
realHDMI$theta
######################
# Aggregated Heckman #
######################
# M <- 50
source("IMI/SimIMI.R")
realHAGG <- IMI(d,M,midx,Xidx_s,Xidx_o,method,N)
realHAGG$theta
setwd("~/Library/CloudStorage/Box-Box/ITCR/code/MNAR/MIDist-master")
#######
# IMI #
#######
load("../RealData/gcasr_clean_noEduc")
midx <- 1 + d$p.y
# M <- 50
source("IMI/SimIMI.R")
realIMI <- IMI(d,M,midx,method,n)
realIMI$theta
##############
# Aggregated #
##############
# M <- 50
source("IMI/SimIMI.R")
realIMI <- IMI(d,M,midx,method,N)
realIMI$theta
########
# AVGM #
########
# M <- 50
source("AVGMMI/SimAVGMMI.R")
realAVGMMI <- AVGMMI(d,M,midx,method,n)
realAVGMMI$theta
#######
# CSL #
#######
# M <- 50
source("CSLMI/SimCSLMI.R")
realCSLMI <- CSLMI(d,M,midx,method,n)
realCSLMI$theta
setwd("~/Library/CloudStorage/Box-Box/ITCR/code/MNAR/RealData")
##### data cleaning #####
gcasr <- read.csv("~/Library/CloudStorage/Box-Box/ITCR/code/Simulation/DataAnal/final_add.csv")
# select only those who arrive by EMS
gcasr <- subset(gcasr, subset = (ArrMode == 1))
# select "x" which is time to CT as outcome
gcasr <- subset(gcasr, subset = (x > 0 & x < 1000))
# # select patients with known HlthIn
# HlthIn.names <- names(gcasr)[grepl("HlthIn", names(gcasr))]
# gcasr <- gcasr
# for (i in HlthIn.names) {
#   gcasr <- gcasr[gcasr[, i] != -99, ]
# }
# ### 30 patients with unknown health insurance types removed
# pick variables
## outcome: time-to-CT (x in dataset)
## variables: Gender, Weekend # HlthIn, RaceW, Age
## Instrument: EducEMS
vars <- c("x",
"Hospital",
# HlthIn.names,
# "RaceW",
# "Age",
"Gender",
"Weekend",
"EMSNote",
"EducEMS")
gcasr <- gcasr[, vars]
gcasr[gcasr == -99] <- NA
gcasr$EMSNote[gcasr$EMSNote == 9] <- NA
gcasr$EducEMS[gcasr$EducEMS == -1] <- 0
# remove obs with missing EducEMS
gcasr <- subset(gcasr, subset = ( !is.na(EducEMS) ))
# remove obs with missing Gender
gcasr <- subset(gcasr, subset = ( !is.na(Gender) ))
# for  Heckman's model, remove hospitals with less than 50 samples
large.hosp <- as.integer(attr(which(table(gcasr$Hospital) >= 50), "names"))
gcasr <- subset(gcasr, subset = (Hospital %in% large.hosp))
# # center Age
# gcasr$Age <- gcasr$Age - mean(gcasr$Age)
# dichotomize gender
gcasr$Gender <- gcasr$Gender - 1
dd <- gcasr
##### analysis #####
n.hosp <- length(unique(dd$Hospital))
dd <- dd[order(dd$Hospital, decreasing = FALSE), ]
n.miss <- aggregate(dd$EMSNote, by = list(dd$Hospital), FUN = function(x) {sum(is.na(x))})
n.miss[, 3] <- table(dd$Hospital)
dd <- subset(dd, subset = Hospital %in% n.miss[which(n.miss[, 2]/n.miss[,3] > 0.05), 1])
d <- new.env()
d$model = "gaussian"
d$N = nrow(dd)
d$p.y = ncol(dd) - 1 - 1 # outcome, Hospital ID, EducEMS + intercept
d$p.s <- ncol(dd) - 1 - 1 + 1 # Hospital ID, EMSNote, + intercept
d$p.o <- d$p.s - 1 #  - EducEMS
d$y = log(dd$x)
d$K <- dd$Hospital
d$muy <- NULL
d$Xp = as.matrix(dd[, -(1:2)])
d$Xp_obs = as.matrix(dd[, -(1:2)])
# d$prob.missing = prob.missing
d$theta = NULL
d$beta = NULL
d$alpha = NULL
d$rho <- NULL
d$delta <- NULL
save(d, file = "gcasr_clean")
d$p.y <- ncol(dd) - 1 - 1
d$alpha = rep(0,d$p.y - 1)
d$Xp = as.matrix(dd[, -c(1, 2, 12)])
d$Xp_obs = as.matrix(dd[, -c(1, 2, 12)])
save(d, file = "gcasr_clean_noEduc")
rm(list = ls())
setwd("~/Library/CloudStorage/Box-Box/ITCR/code/MNAR")
library(parallel)
# source("report.R")
n.cores <- detectCores()
load("RealData/gcasr_clean")
n <- c(table(d$K))
N <- sum(n)
ctr <- which.max(table(d$K))
midx <- 1 + d$p.y
Xidx_s <- setdiff(1:(2 + d$p.y), midx)
Xidx_o <- setdiff(1:(2 + d$p.y - 1), midx)
method <- "logreg"
# No. of imputation
M <- 100
##################
# Complete Cases #
##################
source("Sim/PP.R")
realCC <- lm(d$y ~ d$Xp[, 1:(d$p.y - 1)])
realCC$coefficients
########
# HIMI #
########
# M <- 50
source("IMI/SimIMI.R")
realHIMI <- IMI(d,M,midx,Xidx_s,Xidx_o,method,n)
realHIMI$theta
########
# HDMI #
########
# K = 3
# M <- 50
source("AVGMMI/SimAVGMMI.R")
realHDMI <- AVGMMI(d,M,midx,Xidx_s,Xidx_o,method,n)
realHDMI$theta
######################
# Aggregated Heckman #
######################
# M <- 50
source("IMI/SimIMI.R")
realHAGG <- IMI(d,M,midx,Xidx_s,Xidx_o,method,N)
realHAGG$theta
setwd("~/Library/CloudStorage/Box-Box/ITCR/code/MNAR/MIDist-master")
#######
# IMI #
#######
load("../RealData/gcasr_clean_noEduc")
midx <- 1 + d$p.y
# M <- 50
source("IMI/SimIMI.R")
realIMI <- IMI(d,M,midx,method,n)
realIMI$theta
##############
# Aggregated #
##############
# M <- 50
source("IMI/SimIMI.R")
realIMI <- IMI(d,M,midx,method,N)
realIMI$theta
########
# AVGM #
########
# M <- 50
source("AVGMMI/SimAVGMMI.R")
realAVGMMI <- AVGMMI(d,M,midx,method,n)
realAVGMMI$theta
#######
# CSL #
#######
# M <- 50
source("CSLMI/SimCSLMI.R")
realCSLMI <- CSLMI(d,M,midx,method,n)
realCSLMI$theta
